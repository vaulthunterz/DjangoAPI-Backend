# .github/workflows/deploy.yml

name: Deploy Django Financial App to EC2

# Controls when the workflow will run
on:
  push:
    branches: [ master ] # Trigger on pushes to the master branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' # Match the Python version on your EC2 instance

    # Step 3: Install Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run collectstatic
    - name: Run collectstatic
      env: # Make secrets available as environment variables for this step
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
        AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
        CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
        # Add any other environment variables settings.py might need for collectstatic
        # For example, if SECRET_KEY or DEBUG is read during settings load for collectstatic:
        # SECRET_KEY: "dummy_secret_key_for_collectstatic_workflow" # Provide a dummy or actual if safe
        # DEBUG: "False"
        # Ensure your load_params.py doesn't run or fail here.
        # Best practice is for settings.py to gracefully handle missing non-critical env vars
        # or for collectstatic to not require them.
      run: |
        python manage.py collectstatic --noinput

    # Step 5: Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 6: Sync static files to S3 (This step is now handled by collectstatic with django-storages)
    # If collectstatic was configured to output locally, you would use:
    # - name: Sync static files to S3
    #   run: |
    #     aws s3 sync <local_static_output_dir>/ s3://${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static/ --delete

    # Step 7: Deploy to EC2 using AWS SSM Run Command
    - name: Deploy to EC2
      run: |
        # Define the commands as a heredoc
        COMMANDS_HEREDOC="""
        cd /srv/financial-app
        git fetch origin master
        git reset --hard origin/master
        source venv/bin/activate
        pip install -r requirements.txt
        eval \$(python3 load_params.py)
        python3 manage.py migrate --noinput
        sudo systemctl restart gunicorn
        sudo systemctl restart celery-worker
        echo \"Deployment completed successfully\"
        """

        # Build a JSON array string for the commands
        JSON_PARAMS_PAYLOAD='{"commands":['
        FIRST=1
        while IFS= read -r cmd; do
          # Skip empty lines
          [ -z "$cmd" ] && continue
          # Escape backslashes and double quotes
          ESCAPED_CMD=$(echo "$cmd" | sed 's/\\/\\\\/g' | sed 's/\"/\\\"/g')
          if [ $FIRST -eq 1 ]; then
            JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD\"$ESCAPED_CMD\""
            FIRST=0
          else
            JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD,\"$ESCAPED_CMD\""
          fi
        done <<< "$COMMANDS_HEREDOC"
        JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD] }"

        echo "Final JSON for SSM: $JSON_PARAMS_PAYLOAD"

        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters "$JSON_PARAMS_PAYLOAD" \
          --comment "Deploying new version of Financial App" \
          --output text

    # Optional: Add a step to check command status if needed
    # - name: Check SSM Command Status
    #   run: |
    #     # Add logic to wait and check the status of the send-command invocation
    #     echo "Deployment script sent. Check SSM console for execution status."
