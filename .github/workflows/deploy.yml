name: Deploy Django Financial App to EC2

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run collectstatic
        env:
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
          CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
          SECRET_KEY: "dummy-secret-key-for-collectstatic"
          DEBUG: "False"
          ALLOWED_HOSTS: "localhost,fintrackke.com"
          CORS_ALLOWED_ORIGINS: "https://fintrackke.com"
        run: |
          echo "Running collectstatic to gather files locally..."
          python manage.py collectstatic --noinput -v 3
          echo "Collectstatic finished gathering files."

      - name: Sync static files to S3
        run: |
          echo "Syncing files from local STATIC_ROOT to S3..."
          LOCAL_STATIC_ROOT="/home/runner/work/DjangoAPI-Backend/DjangoAPI-Backend/staticfiles_local_temp_collection"
          S3_DESTINATION_PREFIX="static"
          echo "Local source: ${LOCAL_STATIC_ROOT}/"
          echo "S3 destination: s3://${{ secrets.AWS_STORAGE_BUCKET_NAME }}/${S3_DESTINATION_PREFIX}/"
          aws s3 sync "${LOCAL_STATIC_ROOT}/" "s3://${{ secrets.AWS_STORAGE_BUCKET_NAME }}/${S3_DESTINATION_PREFIX}/" --delete

      # Skip database operations in GitHub Actions - they will be performed on the AWS server

      - name: Deploy to EC2
        run: |
          COMMANDS_HEREDOC=$(cat <<EOF
          cd /srv/financial-app
          echo "Fetching latest code from master..."
          git fetch origin master
          echo "Resetting local branch to origin/master..."
          git reset --hard origin/master
          echo "Activating virtual environment..."
          source venv/bin/activate
          echo "Installing/updating Python dependencies..."
          pip install -r requirements.txt
          echo "Loading environment variables..."
          eval \$(python3 load_params.py)
          echo "Testing database connection..."
          python3 manage.py shell -c "from django.db import connection; cursor = connection.cursor(); cursor.execute('SELECT 1'); print('Database connection successful:', cursor.fetchone())"

          echo "Running database migrations..."
          python3 manage.py migrate --noinput
          echo "Populating initial categories and subcategories..."
          echo "Current directory: $(pwd)"
          echo "Checking if categories exist before population:"
          python3 manage.py shell -c "from expenses.models import Category; print(f'Categories count: {Category.objects.count()}')"

          # Check if categories already exist
          echo "Checking if categories exist in the database..."
          EXISTING_CATEGORIES=$(python3 manage.py shell -c "from expenses.models import Category; print(Category.objects.count())" | tail -n 1 || echo "0")

          if [ "$EXISTING_CATEGORIES" = "0" ]; then
              echo "No categories found. Populating initial categories and subcategories..."
              python3 manage.py populate_categories -v 3

              # Verify categories were created
              CATEGORIES_COUNT=$(python3 manage.py shell -c "from expenses.models import Category; print(Category.objects.count())" | tail -n 1 || echo "0")
              if [ "$CATEGORIES_COUNT" = "0" ]; then
                  echo "WARNING: Failed to populate categories. Please check database connection and logs."
              else
                  echo "SUCCESS: Populated $CATEGORIES_COUNT categories in the database."
              fi
          else
              echo "Categories already exist ($EXISTING_CATEGORIES found). Skipping population to preserve existing data."
              echo "To force repopulation, run 'python3 manage.py populate_categories --force' manually."
          fi

          echo "==================== CATEGORY VERIFICATION ===================="
          echo "Verifying categories were created:"
          python3 manage.py shell -c "from expenses.models import Category, SubCategory; print(f'Categories count: {Category.objects.count()}'); print(f'Subcategories count: {SubCategory.objects.count()}')"



          echo "==================== FINAL VERIFICATION ===================="
          echo "Final verification of categories:"
          python3 manage.py shell -c "from expenses.models import Category, SubCategory; print(f'Final categories count: {Category.objects.count()}'); print(f'Final subcategories count: {SubCategory.objects.count()}')"

          # Check if categories were successfully created
          CATEGORIES_COUNT=$(python3 manage.py shell -c "from expenses.models import Category; print(Category.objects.count())" | tail -n 1)
          if [ "$CATEGORIES_COUNT" -eq "0" ]; then
              echo "WARNING: No categories were found after population attempt!"
              echo "This may indicate a problem with the database or the populate_categories command."
          else
              echo "SUCCESS: Found $CATEGORIES_COUNT categories in the database."
          fi
          echo "Restarting Gunicorn service..."
          sudo systemctl restart gunicorn
          echo "Restarting Celery worker service..."
          sudo systemctl restart celery-worker
          echo "Deployment completed successfully on EC2"
          EOF
          )

          JSON_PARAMS_PAYLOAD="{\"commands\":["
          FIRST_CMD=true
          while IFS= read -r cmd; do
            if [ -z "$cmd" ]; then continue; fi
            if [ "$FIRST_CMD" = true ]; then
              FIRST_CMD=false
            else
              JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD,"
            fi
            ESCAPED_CMD=$(echo "$cmd" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
            JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD\"$ESCAPED_CMD\""
          done <<< "$COMMANDS_HEREDOC"
          JSON_PARAMS_PAYLOAD="$JSON_PARAMS_PAYLOAD]}"

          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "$JSON_PARAMS_PAYLOAD" \
            --comment "Deploying new version of Financial App via GitHub Actions" \
            --output text