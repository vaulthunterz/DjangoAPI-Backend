"""
Django settings for ExpenseCategorizationAPI project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import firebase_admin

# Load environment variables from .env file
# from dotenv import load_dotenv
# load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# AWS S3 STATICFILES CONFIGURATION
# ------------------------------------------------------------------------------
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'af-south-1')
CLOUDFRONT_DOMAIN = os.environ.get('CLOUDFRONT_DOMAIN')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'static'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# --- MODIFY STATIC_URL ---
if CLOUDFRONT_DOMAIN:
    STATIC_URL = f'https://{CLOUDFRONT_DOMAIN}/{AWS_LOCATION}/' # Use CloudFront
    print(f"INFO: Using CloudFront STATIC_URL: {STATIC_URL}") # Optional: Add print for verification
elif AWS_STORAGE_BUCKET_NAME: # Fallback to S3 domain if CF isn't set
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    print(f"INFO: Using S3 STATIC_URL: {STATIC_URL}") # Optional: Add print for verification
else:
    STATIC_URL = '/static/' # Local fallback
# --- END MODIFY STATIC_URL ---

# Ensure STATIC_ROOT is defined for local use if needed, but ignored by S3 collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_local')
# ------------------------------------------------------------------------------

LOGIN_URL = '/admin/login/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7y5#q$)6kh5@w2bt@+xh)6rf0ouz3hvg+8r4v+y==(3%5#5q)0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Parse ALLOWED_HOSTS from environment variable or use default
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
# Remove empty strings that result from a blank env var or trailing commas
ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]

# settings.py (Additions for HTTPS Security)

# Tell Django to trust the X-Forwarded-Proto header from Nginx
# This is crucial for request.is_secure() to work correctly behind the proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Redirect all non-HTTPS requests to HTTPS (provides an extra layer of security)
SECURE_SSL_REDIRECT = True

# Ensure session cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True

# Ensure CSRF cookies are only sent over HTTPS
CSRF_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = True

# --- HSTS Settings (HTTP Strict Transport Security) ---
# Instruct browsers to *only* use HTTPS for this site for the specified duration.
# Start with a smaller value (e.g., 3600 = 1 hour) for testing if you prefer,
# then increase to a large value like 31536000 (1 year) once confident.
SECURE_HSTS_SECONDS = 3600 # 1 hour (adjust later)

# Set to True only if *all* subdomains (like www) are and will always be HTTPS.
# False is safer initially if unsure.
SECURE_HSTS_INCLUDE_SUBDOMAINS = False

# Set to True only after confirming everything works and considering submission
# to browser preload lists. Requires SECURE_HSTS_INCLUDE_SUBDOMAINS=True.
SECURE_HSTS_PRELOAD = False
# --- End HSTS Settings ---



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'rest_framework',
    'expenses.apps.ExpensesConfig',
    'investment',
    'corsheaders',
    'drf_yasg',
    'ai_service',
]

# REST_FRAMEWORK settings are defined below

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ExpenseCategorizationAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ExpenseCategorizationAPI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Specify your db details in .env, if .env fails, fall back to defaults

# Find the DATABASES dictionary:
DATABASES = {
    'default': {
        # Change ENGINE to read from env, remove default
        'ENGINE': os.environ.get('DB_ENGINE'),
        # Change NAME to read from env, remove default
        'NAME': os.environ.get('DB_NAME'),
        # Change USER to read from env, remove default
        'USER': os.environ.get('DB_USER'),
        # Change PASSWORD to read from env, remove default
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        # Change HOST to read from env, remove default
        'HOST': os.environ.get('DB_HOST'),
        # Change PORT to read from env, remove default
        'PORT': os.environ.get('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'expenses.firebase_auth.FirebaseAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [],
    'DEFAULT_THROTTLE_RATES': {},
    'DEFAULT_AUTHENTICATION_HEADERS': ['Authorization'],
    # 'UNAUTHENTICATED_USER': None,  # This causes issues with anonymous users
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1', 'v2'],  # Allow for future versions
    'VERSION_PARAM': 'version',  # This matches our URL pattern parameter name
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Default number of items per page
}

# CORS settings
# Get CORS origins from environment or use defaults
default_cors_origins = [
    'http://localhost:19006',  # Expo web
    'http://localhost:8081',   # Expo dev server
    'http://localhost:8080',   # Expo dev server
    'http://localhost:19000',  # Expo dev server
    'http://localhost:3000',   # Common React port
    'http://127.0.0.1:19006',  # Alternative localhost
    'http://127.0.0.1:8080',
    'http://127.0.0.1:8000',   # Django default
    'http://127.0.0.1:19000',  # Alternative localhost
]

# Parse CORS_ALLOWED_ORIGINS from environment variable or use defaults
cors_origins_env = os.environ.get('CORS_ALLOWED_ORIGINS', '')
if cors_origins_env:
    CORS_ALLOWED_ORIGINS = cors_origins_env.split(',')
else:
    CORS_ALLOWED_ORIGINS = default_cors_origins

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-debug-mode',
    'x-client-platform',
]

# Add these additional settings
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# Use the same origins for CSRF as for CORS
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS



DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB

# --- CELERY CONFIGURATION (for SQS Broker) ---
# Read broker URL from environment variable (set via load_params.py from SSM)
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL') # Reads 'sqs://' from SSM
CELERY_TASK_CREATE_MISSING_QUEUES = False # Explicitly disable auto-creation

# SQS Specific Broker Transport Options
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'region': 'af-south-1',
    'visibility_timeout': 3600,
    'polling_interval': 1,
    'predefined_queues': {
        'celery': { # This is the default queue name Celery looks for
            'url': 'https://sqs.af-south-1.amazonaws.com/961341546632/financial-app-celery-queue', # <-- PASTE YOUR QUEUE URL HERE
            # 'access_key_id': None, # Not needed with IAM role
            # 'secret_access_key': None, # Not needed with IAM role
        }
    }
}

# Disable Result Backend for now (simplest)
CELERY_RESULT_BACKEND = None

# Keep your other Celery settings if they were correct
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# --- END CELERY CONFIGURATION ---

# Check if Firebase is properly initialized
try:
    firebase_admin.get_app()
    print("Firebase is initialized")
except ValueError:
    print("Firebase is not initialized")

# AI Service Settings
# Use the GEMINI_API_KEY from .env file
GOOGLE_AI_STUDIO_KEY = os.environ.get('GEMINI_API_KEY', '')
GEMINI_MODEL_NAME = os.environ.get('GEMINI_MODEL_NAME', 'gemini-2.0-flash')

# AI Service Feature Flags
ENABLE_GEMINI_AI = os.environ.get('ENABLE_GEMINI_AI', 'true').lower() == 'true'
ENABLE_EXPENSE_AI = os.environ.get('ENABLE_EXPENSE_AI', 'true').lower() == 'true'
ENABLE_INVESTMENT_AI = os.environ.get('ENABLE_INVESTMENT_AI', 'true').lower() == 'true'

# Add debug settings when in development mode
if os.environ.get('DJANGO_DEVELOPMENT') == 'true':
    print("⚠️ Running in DEVELOPMENT mode - authentication might be relaxed ⚠️")
    # More verbose Django logging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
            },
            'django.request': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False,
            },
        },
    }
